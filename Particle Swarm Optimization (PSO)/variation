import numpy as np
import matplotlib.pyplot as plt

def objective_function(x):
    return sum(x**2)

def constriction_pso(obj_func, num_particles, num_dimensions, max_iterations, cognitive_param, social_param):
    phi = cognitive_param + social_param
    constriction_factor = 2.0 / abs(2.0 - phi - np.sqrt(phi**2 - 4*phi))

    particles = np.random.rand(num_particles, num_dimensions)
    velocities = np.random.rand(num_particles, num_dimensions)

    personal_best_positions = particles.copy()
    personal_best_values = np.apply_along_axis(obj_func, 1, particles)

    global_best_position = particles[np.argmin(personal_best_values)]
    global_best_value = np.min(personal_best_values)

    best_values = []

    for iteration in range(max_iterations):
        r1, r2 = np.random.rand(num_particles, num_dimensions), np.random.rand(num_particles, num_dimensions)

        velocities = constriction_factor * (velocities +
                                            cognitive_param * r1 * (personal_best_positions - particles) +
                                            social_param * r2 * (global_best_position - particles))

        particles = particles + velocities

        current_values = np.apply_along_axis(obj_func, 1, particles)

        update_personal_best = current_values < personal_best_values
        personal_best_values[update_personal_best] = current_values[update_personal_best]
        personal_best_positions[update_personal_best] = particles[update_personal_best]

        global_best_position = particles[np.argmin(personal_best_values)]
        global_best_value = np.min(personal_best_values)

        best_values.append(global_best_value)

    return global_best_position, global_best_value, best_values

# Parameters for Constriction Coefficient PSO
num_particles = 30
num_dimensions = 2
max_iterations = 100
cognitive_param = 2.0
social_param = 2.0

# Run Constriction Coefficient PSO
best_position_constriction, best_value_constriction, best_values_constriction = constriction_pso(objective_function, num_particles, num_dimensions, max_iterations, cognitive_param, social_param)

# Run Basic PSO for comparison
best_position_basic, best_value_basic, best_values_basic = particle_swarm_optimization(objective_function, num_particles, num_dimensions, max_iterations, inertia_weight, cognitive_param, social_param)

# Visualize the convergence for both PSO variations
plt.plot(best_values_constriction, label='Constriction PSO')
plt.plot(best_values_basic, label='Basic PSO')
plt.title('Constriction PSO vs Basic PSO Convergence')
plt.xlabel('Iteration')
plt.ylabel('Objective Value')
plt.legend()
plt.show()

print("Constriction PSO - Best Position:", best_position_constriction)
print("Constriction PSO - Best Value:", best_value_constriction)

print("Basic PSO - Best Position:", best_position_basic)
print("Basic PSO - Best Value:", best_value_basic)
